name: Comprehensive Code Metrics Analysis

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  analyze:
    name: Code Metrics Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install radon lizard pylint mccabe xenon pycodestyle cognitive-complexity cloc scc

      # Basic metrics with Radon
      - name: Analyze with Radon
        run: |
          mkdir -p metrics
          echo "=== Cyclomatic Complexity ===" > metrics_report.txt
          find . -name "*.py" | xargs radon cc --show-complexity --average >> metrics_report.txt || true

          echo -e "\n=== Maintainability Index ===" >> metrics_report.txt
          find . -name "*.py" | xargs radon mi --show >> metrics_report.txt || true

          echo -e "\n=== Raw Metrics ===" >> metrics_report.txt
          find . -name "*.py" | xargs radon raw --summary >> metrics_report.txt || true

          echo -e "\n=== Halstead Metrics ===" >> metrics_report.txt
          find . -name "*.py" | xargs radon hal >> metrics_report.txt || true

      - name: Check Python Files
        run: |
          echo "Found Python files:"
          find . -name "*.py" -not -path "*/\.*"

      - name: Run Lizard Analysis
        run: |
          echo -e "\n=== Detailed Code Metrics ===" >> metrics_report.txt
          lizard . --CCN 10 --length 100 --arguments 5 --modified --working_threads 1 >> metrics_report.txt || true

      # Code quality metrics with Pylint
      - name: Analyze with Pylint
        run: |
          echo -e "\n=== Code Quality Metrics ===" >> metrics_report.txt
          find . -name "*.py" -not -path "*/\.*" -exec pylint --output-format=text {} + >> metrics_report.txt || true

      # Xenon for threshold checking
      - name: Check complexity thresholds with Xenon
        run: |
          echo -e "\n=== Complexity Thresholds ===" >> metrics_report.txt
          xenon --max-absolute A --max-modules A --max-average A . || true >> metrics_report.txt

      # Generate detailed report in multiple formats
      - name: Generate detailed reports
        run: |
          # JSON reports
          radon cc . --json > metrics/complexity.json || true
          radon raw . --json > metrics/raw_metrics.json || true
          radon hal . --json > metrics/halstead.json || true
          lizard . --xml > metrics/lizard_report.xml || true
          cp metrics_report.txt metrics/full_report.txt

      - name: Upload metrics results
        uses: actions/upload-artifact@v4
        with:
          name: code-metrics
          path: metrics/
